alias userSP R0;
alias currPID R1;
alias curr_process_table R2;
alias i R3;


breakpoint;

currPID = [SYSTEM_STATUS_TABLE + 1];
curr_process_table = PROCESS_TABLE + currPID*16;

[curr_process_table + 9] = 21;		//setting mode to syscall number ofshutdown SYSACALL i.e. 21 in PROCESS_TABLE
userSP = SP;

[curr_process_table  + 13] = SP;
SP = [curr_process_table + 11]*512 - 1;

if([curr_process_table + 1] != 2 || [curr_process_table + 3] != 1) then	//if user is NOT ROOT or if the process trying to execute SHUTDOWN SYSCALL is NOT SHELL
	[[PTBR + 2*((userSP-1)/512)]*512 + ((userSP-1)%512)] = -1;

	[curr_process_table + 9] = 0;
	SP = [curr_process_table + 13];
	ireturn;
else		
	backup;		//to kill all proccesses except curr_Proc, intin and idle
	R2 = currPID;
	R1 = KILL_ALL;
	call MOD_1;	//calling KILL_ALL of PROCESS_MANAGER module
	restore;



	i = 0;
	while(i < MAX_BUFFER) do
		if([BUFFER_TABLE + 4*i + 1] == 1) then

			backup;         //writing back buffer pages if dirty
			R2 = currPID;
			R1 = DISK_STORE;
			R4 = [BUFFER_TABLE + 4*i + 0];	//block_num
			R3 = (BUFFER/512) + i;		//page_num
			call MOD_4;
			restore;

		endif;
	i = i + 1;
	endwhile;
	
	backup;		//writing back INODE_USER_TABLE and user table 
	R2 = currPID;
	R1 = DISK_STORE;
	R3 = 59;
	R4 = 3;
	call MOD_4;
	restore;
	breakpoint;
	backup;
	R2 = currPID;
	R1 = DISK_STORE;
	R3 = 60;
	R4 = 4;
	call MOD_4;
	restore;


	backup;		//writing back DISK_FREE_LIST
	R2 = currPID;
	R1 = DISK_STORE;
	R3 = 61;
	R4 = 2;
	call MOD_4;
	restore;


	backup;		//writing back ROOT_FILE
	R2 = currPID;
	R1 = DISK_STORE;
	R3 = 62;
	R4 = 5;
	call MOD_4;
	restore;

breakpoint;
	halt;	//finally halting machine after writing back changes to disk
endif;

