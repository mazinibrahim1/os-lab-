//SCHEDULER MODULE 

//INFO of OLD PROCESS STORED IN PROCESS TABLE
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];
multipush(BP);

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

//Stage 27 modifications

alias newPID R3;

if ( [SYSTEM_STATUS_TABLE + 5] != 0 )then
    if ( [PROCESS_TABLE + 16*15 + 4] == WAIT_DISK )then
        newPID = 0;
        //idle scheduled as paging is ongoing and swapper is blocked
    else
        newPID = 15;
        //paging needed so swapper scheduled
    endif;
else
    alias ind R2;
    ind = ((currentPID + 1) % 15);

    while( 1==1 )do
        if ( ([PROCESS_TABLE + ind* 16 + 6] == 0) && ([PROCESS_TABLE + ind* 16 + 4]==CREATED ||  [PROCESS_TABLE + ind* 16 + 4]==READY) )then
            break;
        endif;
        ind = ((ind + 1) % 15);
    endwhile;

    newPID = ind;
endif;	
	

SP=[PROCESS_TABLE + (newPID* 16)+11]*512+[PROCESS_TABLE + (newPID* 16)+12];
PTBR=[PROCESS_TABLE + (newPID* 16)+14];
PTLR=[PROCESS_TABLE +(newPID* 16)+15];
[SYSTEM_STATUS_TABLE + 1] = newPID;
//breakpoint;

if([PROCESS_TABLE + newPID* 16+4] == CREATED) then
	BP=[[PROCESS_TABLE + (newPID* 16)+11]*512];
	SP = [PROCESS_TABLE + (newPID* 16)+13];
	[PROCESS_TABLE + (newPID* 16)+4] = RUNNING;
	//breakpoint;
	[PROCESS_TABLE + (newPID* 16)+9]=0;
	ireturn;
endif;

[PROCESS_TABLE + (newPID* 16)+4] = RUNNING;
//breakpoint;
multipop(BP);
return;


