alias userSP R10;
userSP=SP;
[PROCESS_TABLE +  [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;//store user stack 
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;//change sp to kernal stack 
breakpoint;
alias arg R12;
alias syscall R11;
alias UAP_num R3;
UAP_num = [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1] + 11];
alias i R13;
alias sem_desc_ind R8;	
alias sem_id R7;	
syscall=[([PTBR + 2 * ((userSP - 5) / 512)] * 512) + ((userSP - 5) % 512)];

if(syscall==19)then //Semlock
	[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9] = syscall;
	
	sem_desc_ind = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];

	if(sem_desc_ind < 0 || sem_desc_ind > 7 || [UAP_num*512 + 2*sem_desc_ind + 496] != SEMAPHORE) then		// sem_desc_ind is invalid
		[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = -1;

		[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;
                SP = [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1] + 13];
                ireturn;
	else	//sem_desc_ind is valid
		sem_id = [UAP_num*512 + (2*sem_desc_ind) + 496 + 1];
		while([SEMAPHORE_TABLE + 4*sem_id + 0] != -1 && [SEMAPHORE_TABLE + 4*sem_id + 0] != [SYSTEM_STATUS_TABLE+1]) do
			[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1] + 4] = WAIT_SEMAPHORE;
			[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1] + 5] = sem_id;

			backup;		
			call MOD_5; //call scheduler
			restore;` 	
		endwhile;

		[SEMAPHORE_TABLE + 4*sem_id + 0] = [SYSTEM_STATUS_TABLE+1];

		[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = 0;

                [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;
                SP = [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1] + 13];
                ireturn;
	
	endif;

endif;

if(syscall==20)then //Semunlock
	[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9] = syscall;
	
	sem_desc_ind = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];

        if(sem_desc_ind < 0 || sem_desc_ind > 7 || [UAP_num*512 + 2*sem_desc_ind + 496] != SEMAPHORE) then             // sem_desc_ind is invalid
                
                [[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = -1;

                [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;
                SP = [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1] + 13];
                ireturn;
        else	//sem_desc_ind is valid
                sem_id = [UAP_num*512 + (2*sem_desc_ind) + 496 + 1];
                
		if([SEMAPHORE_TABLE + 4*sem_id + 0] != [SYSTEM_STATUS_TABLE+1]) then		// sem_to be unlocked is not locked by the current process
			[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = -2;

			[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;
                	SP = [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1] + 13];
                	ireturn;
		else		//sem to be unlocked by the current process

			[SEMAPHORE_TABLE + 4*sem_id + 0] = -1;

			i = 0;
			while(i < MAX_PROC_NUM) do
                        	if([PROCESS_TABLE + i*16 + 4] == WAIT_SEMAPHORE  && [PROCESS_TABLE + i*16 + 5] == sem_id) then
                                	[PROCESS_TABLE + i*16 + 4] = READY;
                        	endif;
			i = i + 1;
                	endwhile;

			[[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = 0;

                        [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;
                        SP = [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1] + 13];
                        ireturn;
		endif;
	endif;

	
	

endif;
