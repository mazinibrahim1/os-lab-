[PROCESS_TABLE +  [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;//store user stack 
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;//change sp to kernal stack 
backup;

//Stage 27
//Swapping initiated
if ( [ SYSTEM_STATUS_TABLE + 5 ] != 0 )then
    if ( [SYSTEM_STATUS_TABLE + 1] == SWAPPER_DAEMON && [ SYSTEM_STATUS_TABLE + 5 ] == SWAP_OUT )then
        //Call Swap Out
        R1 = 1;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        call PAGER_MODULE;
    else
        if ( [SYSTEM_STATUS_TABLE + 1] == SWAPPER_DAEMON && [ SYSTEM_STATUS_TABLE + 5 ] == SWAP_IN )then
            //Call Swap in
            R1 = 2;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            call PAGER_MODULE;
        endif;
        //If Current Process is idle

    endif;
else
    //Number of Free Pages are Less
    if ( [ SYSTEM_STATUS_TABLE + 2 ] < MEM_LOW )then
        [ SYSTEM_STATUS_TABLE + 5 ] = SWAP_OUT;
    else

        // If there are swapped processes
        if ( [SYSTEM_STATUS_TABLE + 4] > 0 )then
        
            //Checking if Any process has reached max ticks or if free mem pages > mem_high
            alias i R1;
            i=3;
            while(i < MAX_PROC_NUM-1)do
                if ( ([PROCESS_TABLE + 16*i + 6 ] == 1 && [PROCESS_TABLE + 16*i] > MAX_TICK ) || [ SYSTEM_STATUS_TABLE + 2 ] > MEM_HIGH )then
                    [ SYSTEM_STATUS_TABLE + 5 ] = SWAP_IN;
                    break;
                endif;
                i=i+1;
            endwhile;

        endif;
    endif;

endif;



[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+4] = READY;

alias i R2;
i=0;

while(i<16) do
 if([PROCESS_TABLE+16*i+4]!=TERMINATED) then
  [PROCESS_TABLE+16*i] = [PROCESS_TABLE+16*i] + 1;
 endif;  
 i = i+1; 
endwhile;

call MOD_5;
restore;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9]=0;
//breakpoint;
ireturn;






