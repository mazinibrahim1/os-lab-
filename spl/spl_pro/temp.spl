alias functionNum R1;
alias PID R2;
alias named_local_1 R3;
alias named_local_2 R4;
//--------------------FREE_USER_AREA_PAGE---------------------
if(functionNum == FREE_USER_AREA_PAGE) then
	alias userAreaPageNum R3;
	alias i R4;
	userAreaPageNum = [PROCESS_TABLE + PID*16 + 11];
	i = 0;
	while(i < 8) do
		if([userAreaPageNum*512 + 496 + 2*i] == SEMAPHORE) then
			backup;		//insteasd of MULTIPUSH
			R1 = userAreaPageNum;		//>>>!!!NOTICE!!!<<< R1 used as tmp first (cause R2, and R3 new values depend on the old value of each other, so R1 used as tmp in between) then finaly func)Num is stored in R1
			R3 = PID;
			R2 = [R1*512 + 496 + 2*i + 1];
			R1 = RELEASE_SEMAPHORE;
			call MOD_0;
			restore; 	//instead of MULTIPOP
		endif;
		if([userAreaPageNum*512 + 496 + 2*i] == FILE) then
			backup;		//insteasd of MULTIPUSH
			R1 = CLOSE;		//		calling CLOSE of FILE_MANAGER_TABLE 
			R2 = [userAreaPageNum*512 + 496 + 2*i + 1];
			call MOD_3;
			restore; 	//instead of MULTIPOP
		endif;
	i = i + 1;
	endwhile;
	multipush(R0, R1, R2, R3, R4);
	R1 = RELEASE_PAGE;
	R2 = userAreaPageNum;
	call MOD_2;
	multipop(R0, R1, R2, R3, R4);
	return;
endif;
//----------------------EXIT_PROCESS-----------------------
if(functionNum == EXIT_PROCESS) then
	alias i R3;
	if([PROCESS_TABLE + 16*PID + 9] != 9) then
		i = 0;
		while(i < MAX_PROC_NUM) do
			if([PROCESS_TABLE + 16*i + 4] == WAIT_PROCESS  &&  [PROCESS_TABLE + 16*i + 5] == PID) then
				[PROCESS_TABLE + 16*i + 4] = READY;
			endif;
			if([PROCESS_TABLE + 16*i + 2] == PID) then
				[PROCESS_TABLE + 16*i + 2] = -1;
			endif;
		i = i + 1;
		endwhile;
	endif;
	multipush(R0, R1, R2, R3, R4);		//calling FREE_PAGE_TABLE
	R1 = FREE_PAGE_TABLE;
	R2 = PID;		//REDUNDANT...as R2 already contains PID from invoking function
	call MOD_1;
	multipop(R0, R1, R2, R3, R4);
	multipush(R0, R1, R2, R3, R4);		//calling FREE_USER_AREA_PAGE
	R1 = FREE_USER_AREA_PAGE;
	R2 = PID;		//REDUNDANT...as R2 already contains PID from invoking function
	call MOD_1;
	multipop(R0, R1, R2, R3, R4);
	
	[PROCESS_TABLE + PID*16 + 4] = TERMINATED;
	
	return;
endif;
//----------------------FREE_PAGE_TABLE--------------------------
if(functionNum == FREE_PAGE_TABLE) then
	alias i R3;
	alias tmp R4;
	PTBR = PAGE_TABLE_BASE + 20*PID;		//!!!!!!!>>>>ALERT<<<<!!!!! not sure if this always works
	
	[PTBR + 0] = -1;		//just invalidating entries of LIB page and not freeing them as always need to be in MEM even if no process is using it currently
	[PTBR + 1] = "0000";
	[PTBR + 2] = -1;
	[PTBR + 3] = "0000";
	i = 2;		//invalidating PAGE_TABLE entries and freeing corresponding pages
	while(i<10) do
		if([PTBR + (i*2)] != -1) then
			multipush(R0, R1, R2, R3);
			R1 = RELEASE_PAGE;
			R2 = [PTBR + i*2];
			call MOD_2;
			multipop(R0, R1, R2, R3);
		endif;
		[PTBR + i*2] = -1;
		[PTBR + i*2 + 1] = "0000";
	i = i + 1;
	endwhile;
	//invalidating DISK_MAP_TAB and RELEASE_BLOCKS for STACK and HEAP
	i=0;
	while(i<10) do
		if(([DISK_MAP_TABLE + 10*PID + i] != -1) && (i==2 || i==3 || i==8 || i==9)) then
			backup;		//instead of multipush
			R1 = RELEASE_BLOCK;
			tmp = i;
			R3 = PID;		//>>>!!!CAUTION!!!<<< Notice the use of TMP & order of assigning args
			R2 = [DISK_MAP_TABLE + 10*PID + tmp];		//blockNum
			call MOD_2;		//calling RELEASE_BLOCK on HEAP and STACK blocks if SWAPPED into DISK
			restore;	//instead of multipop
		endif;
		[DISK_MAP_TABLE + 10*PID + i] = -1;		//invalidating all entries in the DISK_MAP_TAB for current process
	i = i + 1;
	endwhile;
	return;
endif;
//-----------------------------------------GET_PCB_ENTRY-----------------------------------------
if(functionNum == GET_PCB_ENTRY) then
	alias i R3;
	i = 0;
	while(i<16) do
		if([PROCESS_TABLE + 16*i + 4] == TERMINATED) then
			[PROCESS_TABLE + 16*i + 4] = ALLOCATED;
			[PROCESS_TABLE + 16*i + 1] = i; 
			[PROCESS_TABLE + 16*i + 14] = PAGE_TABLE_BASE + 20*i;
			[PROCESS_TABLE + 16*i + 15] = 10;
			R0 = i; 	//return value
			return;
		endif;
	i = i + 1;
	endwhile;
	R0 = -1;	//return value if no free entry found
	return;
endif;







//--------------------------------------------KILL_ALL--------------------------------------------
if(functionNum == KILL_ALL) then
	alias i R4;

	i = 0;
	while(i < MAX_FILE_NUM) do    //Lock all files to ensure that no processes are in the middle of a file operation 
		if([INODE_TABLE + 16*i + 1] != -1) then
			backup;
			R1 = ACQUIRE_INODE;
			R3 = PID;
			R2 = i;
			call MOD_0;
			restore;
		endif;
	i = i + 1;
	endwhile;


	//>>>>!!!!caution!!!!<<<<
	//>>>>!!!!caution!!!!<<<<
	//>>>>!!!!caution!!!!<<<<
	//>>>>!!!!CAUTION!!!!<<<<
	//>>>>!!!!caution!!!!<<<<
	//>>>>!!!!CAUTION!!!!<<<<
	//>>>>!!!!caution!!!!<<<<

	i = 2;	//calling EXIT_PROCESS for all process except DAEMON(pid 15), curr_process, idle and init
	while(i <  MAX_PROC_NUM) do

		//if((i != 15) && ([PROCESS_TABLE + 16*i + 4] != TERMINATED) && (i != PID)) then

		if(([PROCESS_TABLE + 16*i + 4] != TERMINATED) && (i != PID)) then

			backup;
			R1 = EXIT_PROCESS;
			R2 = i;
			call MOD_1;
			restore;
		endif;

	i = i + 1;
	endwhile;



	i = 0;
	while(i < MAX_FILE_NUM) do    //release inode lock of all file s acquired before 
		if([INODE_TABLE + 16*i + 1] != -1) then
			backup;
			R1 = RELEASE_INODE;
			R3 = PID;
			R2 = i;
			call MOD_0;
			restore;
		endif;
	i = i + 1;
	endwhile;


	return;

endif;
