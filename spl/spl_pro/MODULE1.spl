//get pcb entry
if(R1==1)then
	alias i R2;
	alias pcb R3;
i=0;
pcb=-1;
	while(i!=16) do
		if([PROCESS_TABLE + i* 16+4]==TERMINATED)then
			pcb=i;	
			break;
		endif;
		i=i+1;
	endwhile;
	if(pcb==-1)then
		R0=-1;
		return;
	endif;
	[PROCESS_TABLE + (pcb * 16) + 1]=pcb;
	[PROCESS_TABLE + (pcb * 16) + 4] = ALLOCATED;
	[PROCESS_TABLE + (pcb * 16) + 14]=PAGE_TABLE_BASE+pcb*20;
	[PROCESS_TABLE + (pcb * 16) + 15]=10;
	R0=pcb;
	return;
endif;



//free userpage
if(R1==2)then
	alias userpage R5;
	userpage=[PROCESS_TABLE +  R2 * 16 + 11];
		alias i R6;
		i=0;
		
		while(i < 8) do

		if([userpage*512 + 496 + 2*i] == SEMAPHORE) then
			backup;		//insteasd of MULTIPUSH	 
			R3 = R2;
			R2 = [userpage*512 + 496 + 2*i + 1];
			R1 = RELEASE_SEMAPHORE;
			call MOD_0;
			restore; 	//instead of MULTIPOP
		endif;

			i = i + 1;
		endwhile;
	
	
		multipush(R5,R1,R2);
		R1=2;
		R2=userpage;
		call MOD_2;
		multipop(R5,R1,R2);
		return;
endif;
//exit process
if(R1==3)then
	if([PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9] != 9)then
		alias i R5;
		i=0;
		while(i<16)do
			if([PROCESS_TABLE+16*i+4]==WAIT_PROCESS && [PROCESS_TABLE+i*16+5]==[SYSTEM_STATUS_TABLE+1]) then
				[PROCESS_TABLE+16*i+4]=READY;
			endif;
			if([PROCESS_TABLE+16*i+2]==[SYSTEM_STATUS_TABLE+1]) then
				[PROCESS_TABLE+16*i+2]=-1;
			endif;
			i=i+1;
		endwhile;
	endif;
	//pagetable free
		multipush(R1,R2);
		R1=4;
		call MOD_1;
		multipop(R1,R2);

	//userpage free
		multipush(R1,R2);
		R1=2;
		call MOD_1;
		multipop(R1,R2);

	[PROCESS_TABLE +  R2 * 16 + 4]=TERMINATED;
	 
	return;
endif;

//pagetable free
if(R1==4)then
	PTBR=PAGE_TABLE_BASE+R2*20;
	[PTBR+0]=-1;
	[PTBR+1]="0000";
	[PTBR+2]=-1;
	[PTBR+3]="0000";
	alias i R5;
	i=4;
		while(i<20)do
			if([PTBR+i]!=-1)then
					multipush(R1,R2,R5);
					R1=2;
					R2=[PTBR+i];
					call MOD_2;
					multipop(R1,R2,R5);
				[PTBR+i]=-1;
				[PTBR+i+1]="0000";
			endif;
			i=i+2;
		endwhile;
		
		if([DISK_MAP_TABLE + R2*10+2]!=-1)then
			multipush(R5,R1,R2);
				R1=4;
				R2=[DISK_MAP_TABLE + R2*10+2];
				call MOD_2;
				multipop(R5,R1,R2);
			[DISK_MAP_TABLE + 10*R2 + 2] = -1;
		endif;
		if([DISK_MAP_TABLE + R2*10+3]!=-1)then
			multipush(R5,R1,R2);
				R1=4;
				R2=[DISK_MAP_TABLE + R2*10+3];
				call MOD_2;
				multipop(R5,R1,R2);
			[DISK_MAP_TABLE + 10*R2 + 3] = -1;
		endif;
		if([DISK_MAP_TABLE + R2*10+8]!=-1)then
			multipush(R5,R1,R2);
				R1=4;
				R2=[DISK_MAP_TABLE + R2*10+8];
				call MOD_2;
				multipop(R5,R1,R2);
			[DISK_MAP_TABLE + 10*R2 + 8] = -1;
		endif;
		if([DISK_MAP_TABLE + R2*10+9]!=-1)then
			multipush(R5,R1,R2);
				R1=4;
				R2=[DISK_MAP_TABLE + R2*10+8];
				call MOD_2;
				multipop(R5,R1,R2);
			[DISK_MAP_TABLE + 10*R2 + 9] = -1;
		endif;
		[DISK_MAP_TABLE + 10*R2 + 4] = -1;
		[DISK_MAP_TABLE + 10*R2 + 5] = -1;
		[DISK_MAP_TABLE + 10*R2 + 6] = -1;
		[DISK_MAP_TABLE + 10*R2 + 7] = -1;
	return;
endif;

